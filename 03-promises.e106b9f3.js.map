{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAYF,SAASC,cAAc,yBACrCE,EAAU,KACVC,EAAgB,EAEpBL,EAAOM,iBAAiB,UAExB,SAA2BC,GACzBA,EAAEC,iBACFL,EAAUM,UAAW,EAErB,IAAMC,EAAWH,EAAEI,cAAcD,SAC3BE,EAAQF,EAASE,MAAMC,MACvBC,EAAOJ,EAASI,KAAKD,MACrBE,EAASL,EAASK,OAAOF,MAUjC,SAASG,IACP,IAAMC,EAiBR,SAAuBC,EAAUN,GAE/B,IAAMO,EAAgBC,KAAKC,SAAW,GAGhCP,EADWd,EAAOU,SACFI,KAAKD,MAEXS,OAAOV,GAEvB,OAAO,IAAIW,SAAQ,SAACC,EAAKC,GAEzBC,YAAW,WACPP,EACFK,EAAI,uBAAwCG,OAAfT,EAAS,QAAYS,OAANf,EAAM,OAEhDa,EAAE,sBAAqCE,OAAfT,EAAS,QAAYS,OAANf,EAAM,M,GAEhDA,E,IAlCegB,CAAcvB,EAAeO,IAE7CP,GAAiB,GAEGiB,OAAOP,KACzBc,cAAczB,GACdC,EAAgB,EAChBF,EAAUM,UAAW,GAEvBQ,EAAQa,MAAK,SAAAC,GACXC,EAAAlC,GAASmC,OAAOC,QAAQH,E,IACvBI,OAAM,SAAAC,GACPJ,EAAAlC,GAASmC,OAAOI,QAAQD,E,IArB1BV,YAAW,WACTV,IACAZ,EAAUkC,aAAY,WACpBtB,G,GACCF,E,GACFF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst submitBtn = document.querySelector('button[type=\"submit\"]');\nlet timerId = null;\nlet promisesCount = 1;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(e) {\n  e.preventDefault();\n  submitBtn.disabled = true;\n\n  const elements = e.currentTarget.elements\n  const delay = elements.delay.value\n  const step = elements.step.value\n  const amount = elements.amount.value\n\n  setTimeout(() => {\n    showPromises();\n    timerId = setInterval(() => {\n      showPromises();\n    }, step)\n  }, delay)\n\n\nfunction showPromises() {\n  const promise = createPromise(promisesCount, delay);\n\n  promisesCount += 1;\n\n  if (promisesCount > Number(amount)) {\n    clearInterval(timerId);\n    promisesCount = 1;\n    submitBtn.disabled = false;\n  }\n  promise.then(result => {\n    Notiflix.Notify.success(result);\n  }).catch(error => {\n    Notiflix.Notify.failure(error);\n  });\n}\n\n}\nfunction createPromise(position, delay) {\n  \n  const shouldResolve = Math.random() > 0.3; \n\n  const elements = formEl.elements\n  const step = elements.step.value\n\n  let delayInMs = Number(delay) + step * (promisesCount - 1);\n\n  return new Promise((res, rej) => {\n\n  setTimeout(() => {\n  if (shouldResolve) {\n    res(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    rej(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}, delay);\n})\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$submitBtn","$ce04d3a99e08e73b$var$timerId","$ce04d3a99e08e73b$var$promisesCount","addEventListener","e","preventDefault","disabled","elements","currentTarget","delay","value","step","amount","showPromises","promise","position","shouldResolve","Math","random","Number","Promise","res","rej","setTimeout","concat","$ce04d3a99e08e73b$var$createPromise","clearInterval","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","setInterval"],"version":3,"file":"03-promises.e106b9f3.js.map"}